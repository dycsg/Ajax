Ajax 能让我们轻松实现 网页 于 服务器之间的数据交互

XMLHttpRequest 访问网页数据必要的对象      简单的用法：var xhrObj = new XMLHttpRequest()         重要、

get 请求 向服务器要资源
post 请求 （向）往服务器提交发送数据

jQuery的Ajax
$.get() 向服务器要数据         必要参数 url 类型：string    可选参数 data携带的参数 object       function()回调函数 
$.post() 向服务器提交数据      必要参数 url 类型：string    可选参数 data提交的数据 object       callback()回调函数

$.ajax() 既可以向服务器要数据 也可以提交数据
使用的方法：$.ajax ( {
type: "请求的方式，例如get或post"
url: "请求的地址"       
data: { } 这次请求要携带的数据   // id= 1
success: function (res) { }  请求成功之后的回调函数})

url就是接口

join() 方法用于数组中元素的连接
ecah() 用于循环

var arr1 = [ "aaa", "bbb", "ccc" ];
$.each(arr1, function(i,val){
    console.info(i); //这里是索引值，将输出0，1，2
    console.info(val); //这里是元素值，将输出aaa，bbb，ccc
});


form 表单属性
action = 指定的url地址 或者页面
_blank = 在新建一个窗口页面打开
_self = 默认的 在相同的页面 或者框架 打开

method  等于$Ajax 中的type 类型  两个值 get post
enctype 涉及到要用form 上传文件的操作 则要将它的值设置成 multipart/form-data
        不要用form 上传文件的操作 则用默认值 application/x-www-form-urlencoded

阻止 action 跳转 给函数一个形参(e)    e.preventDefault()  阻止跳转

push() 向数组末尾添加一个获取多个元素 返回新的长度
join() 连接元素
trim() 减去空格
serialize() 获取数据
exec() 检索字符串 正则 判断 失败返回null

encodeURL() 编码的函数
decodeURl() 解码的函数


json数据类型   必须用花括号{}
      //错误的
{          
    name: "zs",
    'age': 20,
    "gender": '男',
    "address": undefined,
    "hobby": ["吃饭", "睡觉", '打豆豆'],
    say: function() {}
}
// 正确的   所有的 属性 和 属性值 加双引号""
{          
    "anem": "zs",
    "age": 20,         
    "gender": "男",
    "address": null,    //没有的值要用空null
    "hobby": ["吃饭", "睡觉", "打豆豆"],
    //不能有函数
}


防抖 当事件被触发后 延迟n秒 再执行回调 如果在这n秒内事件又被触发 则重新计时 

git 命令
配置用户信息
git config --global user.name "dyc"
git config --global user.meail "dingyangcai@163.com"

查看配置信息
git config --list --global

查看文件状态
git status
git status -s

添加跟踪文件     再查看文件状态 status
git add 文件名  

向暂存区一次性提交多个文件
git add .

提交更新         再查看文件状态 status
git commit -m "新建了文件"

撤销对文件的修改   有危险
git checkout -- 文件名

移除暂存区的文件
git reset HEAD 文件名

跳过暂存直接提交更新
git commit -a -m "提交了文件"

从 git 仓库中和工作区同时移除文件 
git rm -f 文件名

从git 仓库中移除文件 保留工作区的文件
git rm --cached 文件名

https上传文件到远程仓库
git push

shh上传文件到远程仓库  三次回车   复制C:\Users\35011\.ssh 下的id_rsa.pub文件 复制 GitHub网站找到头像 ssh证书 添加
shh-keygen -t rsa -b 4096 -C "3501194074@qq.com"
git push
查看是否配置成功
ssh -T git@github.com

将远程仓库的文件下载到本地
git clone 地址

查看分支列表  *表示当前所处的分支
git branch

创建分支         注意：创建完后当前处在master主分支上，不会跳转
git branch 分支名(login)

切换分支
git checkout 分支名称

创建分支并切换到其分支
git checkout -b 分支名称